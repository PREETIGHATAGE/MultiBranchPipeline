
AWSTemplateFormatVersion: '2010-09-09'
Description: Master stack for Blue/Green Deployment with nested CloudFormation templates

Parameters:
  VpcCIDR:
    Type: String
  PublicSubnet1CIDR:
    Type: String
  PublicSubnet2CIDR:
    Type: String
  DomainName:
    Type: String
  HostedZoneId:
    Type: String

Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/blue-green-cfn-templates/network/vpc-subnets.yaml
      Parameters:
        VpcCIDR: !Ref VpcCIDR
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR

  ACMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/blue-green-cfn-templates/acm/ssl-cert.yaml
      Parameters:
        DomainName: !Ref DomainName

  ALBBlueStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/blue-green-cfn-templates/alb/alb-blue.yaml

  ALBGreenStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/blue-green-cfn-templates/alb/alb-green.yaml

  ASGBlueStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/blue-green-cfn-templates/asg/asg-blue.yaml

  ASGGreenStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/blue-green-cfn-templates/asg/asg-green.yaml

  DNSRoutingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/blue-green-cfn-templates/route53/dns-weighted-routing.yaml
      Parameters:
        DomainName: !Ref DomainName
        HostedZoneId: !Ref HostedZoneId

#!/bin/bash

# -------- CONFIG --------
BUCKET="blue-green-cfn-templates"     # <- change if your bucket name is different
STACK_NAME="blue-green-master"
REGION="us-east-1"

echo "âœ… Uploading templates to S3..."

aws s3 cp master-template.yaml s3://$BUCKET/ --region $REGION
aws s3 cp network/vpc-subnets.yaml s3://$BUCKET/network/ --region $REGION
aws s3 cp alb/alb-blue.yaml s3://$BUCKET/alb/ --region $REGION
aws s3 cp alb/alb-green.yaml s3://$BUCKET/alb/ --region $REGION
aws s3 cp asg/asg-blue.yaml s3://$BUCKET/asg/ --region $REGION
aws s3 cp asg/asg-green.yaml s3://$BUCKET/asg/ --region $REGION
aws s3 cp acm/ssl-cert.yaml s3://$BUCKET/acm/ --region $REGION
aws s3 cp route53/dns-weighted-routing.yaml s3://$BUCKET/route53/ --region $REGION
aws s3 cp parameters/params.json s3://$BUCKET/parameters/ --region $REGION

echo "âœ… Setting public-read permissions..."

FILES=(
  "master-template.yaml"
  "network/vpc-subnets.yaml"
  "alb/alb-blue.yaml"
  "alb/alb-green.yaml"
  "asg/asg-blue.yaml"
  "asg/asg-green.yaml"
  "acm/ssl-cert.yaml"
  "route53/dns-weighted-routing.yaml"
)

for file in "${FILES[@]}"; do
  aws s3api put-object-acl --bucket $BUCKET --key "$file" --acl public-read
done

echo "ðŸš€ Launching CloudFormation stack: $STACK_NAME"

aws cloudformation create-stack \
  --stack-name $STACK_NAME \
  --template-url https://s3.amazonaws.com/$BUCKET/master-template.yaml \
  --parameters file://parameters/params.json \
  --capabilities CAPABILITY_NAMED_IAM \
  --region $REGION

echo "ðŸŽ‰ Deployment started. Monitor stack in the AWS CloudFormation Console."


AWSTemplateFormatVersion: '2010-09-09'
Description: Master stack for Blue/Green Deployment with nested CloudFormation templates

Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/network/vpc-subnets.yaml
      Parameters:
        VpcCIDR: "10.0.0.0/16"
        PublicSubnet1CIDR: "10.0.1.0/24"
        PublicSubnet2CIDR: "10.0.2.0/24"

  ACMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/acm/ssl-cert.yaml
      Parameters:
        DomainName: "bluegreen.example.com"

  ALBBlueStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/alb/alb-blue.yaml

  ALBGreenStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/alb/alb-green.yaml

  ASGBlueStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/asg/asg-blue.yaml

  ASGGreenStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/asg/asg-green.yaml

  DNSRoutingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/route53/dns-weighted-routing.yaml
      Parameters:
        DomainName: "bluegreen.example.com"
        HostedZoneId: "Z123456ABCDEFG"AWSTemplateFormatVersion: '2010-09-09'
Description: Master stack for Blue/Green Deployment with nested CloudFormation templates

Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/network/vpc-subnets.yaml
      Parameters:
        VpcCIDR: "10.0.0.0/16"
        PublicSubnet1CIDR: "10.0.1.0/24"
        PublicSubnet2CIDR: "10.0.2.0/24"

  ACMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/acm/ssl-cert.yaml
      Parameters:
        DomainName: "bluegreen.example.com"

  ALBBlueStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/alb/alb-blue.yaml

  ALBGreenStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/alb/alb-green.yaml

  ASGBlueStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/asg/asg-blue.yaml

  ASGGreenStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/asg/asg-green.yaml

  DNSRoutingStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/YOUR_BUCKET/route53/dns-weighted-routing.yaml
      Parameters:
        DomainName: "bluegreen.example.com"
        HostedZoneId: "Z123456ABCDEFG"


AWSTemplateFormatVersion: '2010-09-09'
Description: Create VPC and public subnets for B/G deployment

Parameters:
  VpcCIDR:
    Type: String
  PublicSubnet1CIDR:
    Type: String
  PublicSubnet2CIDR:
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: bluegreen-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: bluegreen-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: bluegreen-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

Outputs:
  VPC:
    Value: !Ref VPC
  PublicSubnet1:
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2




AWSTemplateFormatVersion: '2010-09-09'
Description: ALB for Blue Environment

Parameters:
  VPC:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  SecurityGroup:
    Type: String

Resources:
  ALBBlue:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: blue-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: blue-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 200-399

  ListenerBlue:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALBBlue
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBlue

Outputs:
  ALBArn:
    Value: !Ref ALBBlue
  ALBDNS:
    Value: !GetAtt ALBBlue.DNSName
  TargetGroupArn:
    Value: !Ref TargetGroupBlue



AWSTemplateFormatVersion: '2010-09-09'
Description: ALB for Green Environment

Parameters:
  VPC:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  SecurityGroup:
    Type: String

Resources:
  ALBGreen:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: green-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: green-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 200-399

  ListenerGreen:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALBGreen
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupGreen

Outputs:
  ALBArn:
    Value: !Ref ALBGreen
  ALBDNS:
    Value: !GetAtt ALBGreen.DNSName
  TargetGroupArn:
    Value: !Ref TargetGroupGreen


AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Group for Blue Environment

Parameters:
  AMI:
    Type: String
  InstanceType:
    Type: String
  Subnet1:
    Type: String
  Subnet2:
    Type: String
  TargetGroupArn:
    Type: String

Resources:
  LaunchTemplateBlue:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: blue-lt
      LaunchTemplateData:
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y httpd
            systemctl start httpd
            echo "Welcome to Blue Environment" > /var/www/html/index.html

  AutoScalingGroupBlue:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "2"
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      TargetGroupARNs:
        - !Ref TargetGroupArn
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateBlue
        Version: !GetAtt LaunchTemplateBlue.LatestVersionNumber

Outputs:
  ASG:
    Value: !Ref AutoScalingGroupBlue



AWSTemplateFormatVersion: '2010-09-09'
Description: Auto Scaling Group for Green Environment

Parameters:
  AMI:
    Type: String
  InstanceType:
    Type: String
  Subnet1:
    Type: String
  Subnet2:
    Type: String
  TargetGroupArn:
    Type: String

Resources:
  LaunchTemplateGreen:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: green-lt
      LaunchTemplateData:
        ImageId: !Ref AMI
        InstanceType: !Ref InstanceType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install -y httpd
            systemctl start httpd
            echo "Welcome to Green Environment" > /var/www/html/index.html

  AutoScalingGroupGreen:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "2"
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      TargetGroupARNs:
        - !Ref TargetGroupArn
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplateGreen
        Version: !GetAtt LaunchTemplateGreen.LatestVersionNumber

Outputs:
  ASG:
    Value: !Ref AutoScalingGroupGreen


AWSTemplateFormatVersion: '2010-09-09'
Description: ACM SSL Certificate for Blue/Green ALBs

Parameters:
  DomainName:
    Type: String

Resources:
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

Outputs:
  CertificateArn:
    Value: !Ref SSLCertificate



AWSTemplateFormatVersion: '2010-09-09'
Description: Route 53 Weighted DNS Records for Blue/Green Deployment

Parameters:
  DomainName:
    Type: String
  HostedZoneId:
    Type: String

Resources:
  BlueDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      HostedZoneId: !Ref HostedZoneId
      Type: A
      SetIdentifier: blue
      Weight: 100
      AliasTarget:
        DNSName: blue-alb-dns-name.example.com   # Replace with actual ALB DNS from Outputs
        HostedZoneId: Z2FDTNDATAQYW2              # Use actual ALB Hosted Zone ID

  GreenDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      HostedZoneId: !Ref HostedZoneId
      Type: A
      SetIdentifier: green
      Weight: 0
      AliasTarget:
        DNSName: green-alb-dns-name.example.com  # Replace with actual ALB DNS from Outputs
        HostedZoneId: Z2FDTNDATAQYW2             # Use actual ALB Hosted Zone ID


[
  {
    "ParameterKey": "VpcCIDR",
    "ParameterValue": "10.0.0.0/16"
  },
  {
    "ParameterKey": "PublicSubnet1CIDR",
    "ParameterValue": "10.0.1.0/24"
  },
  {
    "ParameterKey": "PublicSubnet2CIDR",
    "ParameterValue": "10.0.2.0/24"
  },
  {
    "ParameterKey": "DomainName",
    "ParameterValue": "bluegreen.example.com"
  },
  {
    "ParameterKey": "HostedZoneId",
    "ParameterValue": "Z123456ABCDEFG"
  },
  {
    "ParameterKey": "AMI",
    "ParameterValue": "ami-0abcdef1234567890"
  },
  {
    "ParameterKey": "InstanceType",
    "ParameterValue": "t2.micro"
  }
]
